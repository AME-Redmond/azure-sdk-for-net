// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> Batch inference settings per deployment. </summary>
    public partial class BatchDeployment
    {
        /// <summary> Initializes a new instance of BatchDeployment. </summary>
        public BatchDeployment()
        {
            PartitionKeys = new ChangeTrackingList<string>();
            Properties = new ChangeTrackingDictionary<string, string>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of BatchDeployment. </summary>
        /// <param name="compute"> Configuration for compute binding. </param>
        /// <param name="errorThreshold">
        /// Error threshold, if the error count for the entire input goes above this value,
        /// 
        /// the batch inference will be aborted. Range is [-1, int.MaxValue].
        /// 
        /// For FileDataset, this value is the count of file failures.
        /// 
        /// For TabularDataset, this value is the count of record failures.
        /// 
        /// If set to -1 (the lower bound), all failures during batch inference will be ignored.
        /// </param>
        /// <param name="retrySettings"> Retry Settings for the batch inference operation. </param>
        /// <param name="partitionKeys"> Partition keys list used for Named partitioning. </param>
        /// <param name="miniBatchSize">
        /// Size of the mini-batch passed to each batch invocation.
        /// 
        /// For FileDataset, this is the number of files per mini-batch.
        /// 
        /// For TabularDataset, this is the size of the records in bytes, per mini-batch.
        /// </param>
        /// <param name="loggingLevel"> Logging level for batch inference operation. </param>
        /// <param name="outputConfiguration"> Output configuration for the batch inference operation. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="model"> Reference to the model asset for the endpoint deployment. </param>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        internal BatchDeployment(ComputeConfiguration compute, int? errorThreshold, BatchRetrySettings retrySettings, IList<string> partitionKeys, long? miniBatchSize, BatchLoggingLevel? loggingLevel, BatchOutputConfiguration outputConfiguration, string description, IDictionary<string, string> properties, AssetReferenceBase model, CodeConfiguration codeConfiguration, string environmentId, IDictionary<string, string> environmentVariables)
        {
            Compute = compute;
            ErrorThreshold = errorThreshold;
            RetrySettings = retrySettings;
            PartitionKeys = partitionKeys;
            MiniBatchSize = miniBatchSize;
            LoggingLevel = loggingLevel;
            OutputConfiguration = outputConfiguration;
            Description = description;
            Properties = properties;
            Model = model;
            CodeConfiguration = codeConfiguration;
            EnvironmentId = environmentId;
            EnvironmentVariables = environmentVariables;
        }

        /// <summary> Configuration for compute binding. </summary>
        public ComputeConfiguration Compute { get; set; }
        /// <summary>
        /// Error threshold, if the error count for the entire input goes above this value,
        /// 
        /// the batch inference will be aborted. Range is [-1, int.MaxValue].
        /// 
        /// For FileDataset, this value is the count of file failures.
        /// 
        /// For TabularDataset, this value is the count of record failures.
        /// 
        /// If set to -1 (the lower bound), all failures during batch inference will be ignored.
        /// </summary>
        public int? ErrorThreshold { get; set; }
        /// <summary> Retry Settings for the batch inference operation. </summary>
        public BatchRetrySettings RetrySettings { get; set; }
        /// <summary> Partition keys list used for Named partitioning. </summary>
        public IList<string> PartitionKeys { get; }
        /// <summary>
        /// Size of the mini-batch passed to each batch invocation.
        /// 
        /// For FileDataset, this is the number of files per mini-batch.
        /// 
        /// For TabularDataset, this is the size of the records in bytes, per mini-batch.
        /// </summary>
        public long? MiniBatchSize { get; set; }
        /// <summary> Logging level for batch inference operation. </summary>
        public BatchLoggingLevel? LoggingLevel { get; set; }
        /// <summary> Output configuration for the batch inference operation. </summary>
        public BatchOutputConfiguration OutputConfiguration { get; set; }
        /// <summary> Description of the endpoint deployment. </summary>
        public string Description { get; set; }
        /// <summary> Property dictionary. Properties can be added, but not removed or altered. </summary>
        public IDictionary<string, string> Properties { get; }
        /// <summary> Reference to the model asset for the endpoint deployment. </summary>
        public AssetReferenceBase Model { get; set; }
        /// <summary> Code configuration for the endpoint deployment. </summary>
        public CodeConfiguration CodeConfiguration { get; set; }
        /// <summary> ARM resource ID of the environment specification for the endpoint deployment. </summary>
        public string EnvironmentId { get; set; }
        /// <summary> Environment variables configuration for the deployment. </summary>
        public IDictionary<string, string> EnvironmentVariables { get; }
    }
}
